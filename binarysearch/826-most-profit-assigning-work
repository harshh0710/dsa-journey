class Solution {
public:
    int binarySearch(vector<vector<int>>& arr,int worker) {
        int start=0;
        int end=arr.size()-1;
        int index=-1;

        while(start<=end) {
            int mid=start+(end-start)/2;
            if (arr[mid][0]<=worker) {
                index=mid;
                start=mid+1;
            }else {
                end=mid-1;
            }
        }
        return index;
    }

    int maxProfitAssignment(vector<int>& difficulty,vector<int>& profit,vector<int>& worker) {
        vector<vector<int>> arr(difficulty.size(),vector<int>(2));
        for (int i=0;i<difficulty.size();i++) {
            arr[i][0]=difficulty[i];
            arr[i][1]=profit[i];
        }

        sort(arr.begin(),arr.end(),[](const vector<int>& a,const vector<int>& b){
            return a[0]<b[0];
        });

        for(int i=1;i<arr.size();i++) {
            arr[i][1]=max(arr[i][1],arr[i-1][1]);
        }

        int maxProfit = 0;
        for(int i=0;i<worker.size();i++) {
            int index=binarySearch(arr,worker[i]);
            maxProfit+=(index==-1?0:arr[index][1]);
        }
        return maxProfit;
    }
};
